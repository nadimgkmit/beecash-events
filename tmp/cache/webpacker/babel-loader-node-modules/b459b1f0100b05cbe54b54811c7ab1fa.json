{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar creatable_1 = require(\"react-select/creatable\");\n\nvar react_select_1 = require(\"react-select\");\n\nvar lodash_1 = require(\"lodash\");\n\nvar SelectDropdownStyles_1 = require(\"./SelectDropdownStyles\");\n\nvar SelectDropdown = function (_super) {\n  __extends(SelectDropdown, _super);\n\n  function SelectDropdown() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.noOptionsMessage = function (obj) {\n      var selectProps = _this.props.selectProps;\n\n      if (lodash_1.isNil(selectProps)) {\n        return null;\n      }\n\n      if (lodash_1.isEmpty(obj) || lodash_1.isEmpty(obj.inputValue)) {\n        return selectProps.msgNoOptionsAvailable || \"No more options are available\";\n      }\n\n      var inputValue = obj.inputValue;\n\n      if (selectProps.isCreatable !== true || _this.containsValue(inputValue) || _this.containsOptions(inputValue)) {\n        return selectProps.msgNoOptionsMatchFilter || \"No options match the filter\";\n      }\n\n      return selectProps.msgNoValidValue || \"The new value is not valid (contains space)\";\n    };\n\n    _this.isValidNewOption = function (inputValue) {\n      if (lodash_1.isEmpty(inputValue)) {\n        return false;\n      }\n\n      if (_this.containsOptions(inputValue)) {\n        return false;\n      }\n\n      var hasSpaces = SelectDropdown.spaces.test(inputValue);\n      return hasSpaces === false;\n    };\n\n    return _this;\n  }\n\n  SelectDropdown.prototype.render = function () {\n    var _a = this.props,\n        inputId = _a.inputId,\n        hasInputFocus = _a.hasInputFocus,\n        value = _a.value,\n        placeholder = _a.placeholder,\n        options = _a.options,\n        selectProps = _a.selectProps,\n        onChange = _a.onChange,\n        onFocus = _a.onFocus,\n        onBlur = _a.onBlur;\n    var Select = selectProps && selectProps.isCreatable ? creatable_1[\"default\"] : react_select_1[\"default\"];\n    return React.createElement(Select, __assign({\n      inputId: inputId,\n      isValidNewOption: this.isValidNewOption,\n      captureMenuScroll: false,\n      createOptionPosition: \"first\"\n    }, selectProps, {\n      value: value,\n      placeholder: placeholder,\n      options: options,\n      styles: SelectDropdownStyles_1.getStyles(selectProps, hasInputFocus),\n      noOptionsMessage: this.noOptionsMessage,\n      onChange: onChange,\n      onFocus: onFocus,\n      onBlur: onBlur\n    }));\n  };\n\n  SelectDropdown.prototype.containsOptions = function (inputValue) {\n    var _this = this;\n\n    return lodash_1.some(this.props.options, function (option) {\n      return _this.equalsIgnoringCase(inputValue, option.value);\n    });\n  };\n\n  SelectDropdown.prototype.containsValue = function (inputValue) {\n    var _this = this;\n\n    var value = this.props.value;\n\n    if (lodash_1.isArray(value) === false) {\n      return false;\n    }\n\n    return lodash_1.some(value, function (option) {\n      return _this.equalsIgnoringCase(inputValue, option.value);\n    });\n  };\n\n  SelectDropdown.prototype.equalsIgnoringCase = function (a, b) {\n    return a.localeCompare(lodash_1.toString(b), undefined, SelectDropdown.SENSITIVITY) === 0;\n  };\n\n  SelectDropdown.spaces = /\\s/;\n  SelectDropdown.SENSITIVITY = {\n    sensitivity: \"base\"\n  };\n  return SelectDropdown;\n}(React.Component);\n\nexports[\"default\"] = SelectDropdown;","map":null,"metadata":{},"sourceType":"module"}