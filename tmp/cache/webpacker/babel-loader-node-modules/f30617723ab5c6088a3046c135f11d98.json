{"ast":null,"code":"var _jsxFileName = \"/Users/jarvis/dev/beecash-events/app/javascript/packs/_component/form/autocomplete.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { crudService } from '../../_services';\nimport ReactSelectMaterialUi from \"react-select-material-ui\";\n\nvar MuiAutocompleteBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(MuiAutocompleteBox, _React$Component);\n\n  var _super = _createSuper(MuiAutocompleteBox);\n\n  function MuiAutocompleteBox() {\n    var _this;\n\n    _classCallCheck(this, MuiAutocompleteBox);\n\n    _this = _super.call(this);\n\n    _this.fetchData = function () {\n      var url = _this.props.url;\n      var searchText = _this.state.searchText;\n      var query = {\n        search: searchText\n      };\n\n      crudService._getAllData(url, query).then(function (result) {\n        if (result.status === 200) {\n          _this.setState({\n            options: result.data.data\n          });\n        }\n      });\n    };\n\n    _this.handleChange = function (value, name, index) {\n      _this.props.handleChange(value, name, index);\n    };\n\n    _this.onInputChange = function (event) {\n      var newState = Object.assign({}, _this.state);\n      newState.searchText = event.target.value;\n\n      _this.setState(newState, function () {\n        _this.fetchData();\n      });\n    };\n\n    _this.state = {\n      search: false,\n      searchText: '',\n      options: []\n    };\n    return _this;\n  }\n\n  _createClass(MuiAutocompleteBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          name = _this$props.name,\n          value = _this$props.value,\n          label = _this$props.label,\n          fullWidth = _this$props.fullWidth,\n          helperText = _this$props.helperText,\n          index = _this$props.index,\n          getOptionLabel = _this$props.getOptionLabel;\n      var options = this.state.options;\n      var selectOptions = [];\n\n      if (options) {\n        options.forEach(function (element) {\n          selectOptions.push({\n            label: element[getOptionLabel],\n            value: element.id\n          });\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        error: helperText ? true : false,\n        fullWidth: fullWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ReactSelectMaterialUi, {\n        label: label,\n        value: value,\n        options: selectOptions,\n        onChange: function onChange(e) {\n          return _this2.handleChange(e, name, index);\n        },\n        onInput: this.onInputChange,\n        SelectProps: {\n          isClearable: true\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      }), helperText && /*#__PURE__*/React.createElement(FormHelperText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 36\n        }\n      }, helperText)));\n    }\n  }]);\n\n  return MuiAutocompleteBox;\n}(React.Component);\n\nMuiAutocompleteBox.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.any.isRequired\n};\nMuiAutocompleteBox.defaultProps = {\n  name: \"\",\n  label: \"\",\n  value: \"\"\n};\nexport default MuiAutocompleteBox;","map":{"version":3,"sources":["/Users/jarvis/dev/beecash-events/app/javascript/packs/_component/form/autocomplete.jsx"],"names":["React","PropTypes","FormControl","FormHelperText","crudService","ReactSelectMaterialUi","MuiAutocompleteBox","fetchData","url","props","searchText","state","query","search","_getAllData","then","result","status","setState","options","data","handleChange","value","name","index","onInputChange","event","newState","Object","assign","target","label","fullWidth","helperText","getOptionLabel","selectOptions","forEach","element","push","id","e","isClearable","Component","propTypes","string","isRequired","any","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { crudService } from '../../_services';\nimport ReactSelectMaterialUi from \"react-select-material-ui\";\n\nclass MuiAutocompleteBox extends React.Component {\n\n    constructor() {\n        super()\n        this.state = {\n            search: false,\n            searchText: '',\n            options: []\n        }\n    }\n\n    componentDidMount() {\n        this.fetchData()\n    }\n\n    fetchData = () => {\n        const { url } = this.props\n        const { searchText } = this.state\n        const query = {\n            search: searchText\n        }\n        crudService._getAllData(url, query)\n            .then(\n                result => {\n                    if (result.status === 200) {\n                        this.setState({\n                            options: result.data.data,\n                        })\n                    }\n                }\n            );\n    }\n\n    handleChange = (value, name, index) => {\n        this.props.handleChange(value, name, index)\n    }\n\n    onInputChange = (event) => {\n        const newState = Object.assign({}, this.state);\n        newState.searchText = event.target.value;\n        this.setState(newState, () => {\n            this.fetchData()\n        });\n    }\n\n    render() {\n        const { name, value, label, fullWidth, helperText, index, getOptionLabel } = this.props\n        const { options } = this.state\n\n        let selectOptions = []\n        if (options) {\n            options.forEach(element => {\n                selectOptions.push({\n                    label: element[getOptionLabel],\n                    value: element.id,\n                })\n            });\n        }\n\n        return (\n            <React.Fragment>\n                <FormControl\n                    error={helperText ? true : false}\n                    fullWidth={fullWidth}\n                >\n\n                    <ReactSelectMaterialUi\n                        label={label}\n                        value={value}\n                        options={selectOptions}\n                        onChange={(e) => this.handleChange(e, name, index)}\n                        onInput={this.onInputChange}\n                        SelectProps={{\n                            isClearable: true,\n                        }}\n                    />\n\n                    {helperText && <FormHelperText>{helperText}</FormHelperText>}\n                </FormControl>\n            </React.Fragment>\n        )\n    }\n}\n\nMuiAutocompleteBox.propTypes = {\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    value: PropTypes.any.isRequired,    \n};\n\nMuiAutocompleteBox.defaultProps = {\n    name: \"\",\n    label: \"\",\n    value: \"\",    \n}\n\n\nexport default MuiAutocompleteBox;"]},"metadata":{},"sourceType":"module"}