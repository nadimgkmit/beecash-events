{"ast":null,"code":"import axios from 'axios';\nimport { authHeader, store } from '../_helpers';\nimport { alertActions, loaderActions, userActions, crudActions } from '../_actions';\nvar apiUrl = '';\n\nif (process.env.NODE_ENV === 'production') {\n  apiUrl = '';\n}\n\nvar instance = axios.create({\n  baseURL: apiUrl\n});\nvar dispatch = store.dispatch;\n\nvar successHandler = function successHandler(response) {\n  if (response) {\n    dispatch(loaderActions.hide());\n  }\n\n  return response;\n};\n\nvar parseError = function parseError(e) {\n  if (!!e && !!e.response) {\n    if (!!e.response.data) {\n      if (!!e.response.data.message && typeof e.response.data.message === 'string') {\n        return e.response.data.message;\n      }\n\n      if (!!e.response.data.message && typeof e.response.data.message === 'object' && !!e.response.data.message.detail) {\n        return e.response.data.message.detail;\n      }\n    }\n\n    if (!!e.response.statusText) {\n      return e.response.statusText;\n    }\n  }\n\n  return 'Something went wrong!';\n};\n\nvar errorHandler = function errorHandler(error) {\n  var response = error.response;\n\n  if (response) {\n    if (response.status === 401) {\n      dispatch(userActions.logout());\n    }\n\n    dispatch(alertActions.error(parseError(error)));\n    dispatch(loaderActions.hide());\n    return response;\n  }\n\n  return error;\n};\n\nvar requestHandler = function requestHandler(request) {\n  if (request) {\n    dispatch(crudActions._clear('formSubmit'));\n  }\n\n  request.headers = authHeader();\n  return request;\n};\n\ninstance.interceptors.request.use(function (request) {\n  return requestHandler(request);\n});\ninstance.interceptors.response.use(function (response) {\n  return successHandler(response);\n}, function (error) {\n  return errorHandler(error);\n});\nexport var apiConfig = instance;","map":{"version":3,"sources":["/Users/jarvis/dev/beecash-events/app/javascript/packs/_services/api.jsx"],"names":["axios","authHeader","store","alertActions","loaderActions","userActions","crudActions","apiUrl","process","env","NODE_ENV","instance","create","baseURL","dispatch","successHandler","response","hide","parseError","e","data","message","detail","statusText","errorHandler","error","status","logout","requestHandler","request","_clear","headers","interceptors","use","apiConfig"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,aAAlC;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,WAAtC,EAAmDC,WAAnD,QAAsE,aAAtE;AAEA,IAAIC,MAAM,GAAG,EAAb;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCH,EAAAA,MAAM,GAAG,EAAT;AACH;;AAED,IAAII,QAAQ,GAAGX,KAAK,CAACY,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAEN;AADe,CAAb,CAAf;IAKQO,Q,GAAaZ,K,CAAbY,Q;;AACR,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAc;AACjC,MAAIA,QAAJ,EAAc;AACVF,IAAAA,QAAQ,CAACV,aAAa,CAACa,IAAd,EAAD,CAAR;AACH;;AACD,SAAOD,QAAP;AACH,CALD;;AAOA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAO;AACtB,MAAI,CAAC,CAACA,CAAF,IAAO,CAAC,CAACA,CAAC,CAACH,QAAf,EAAyB;AACrB,QAAI,CAAC,CAACG,CAAC,CAACH,QAAF,CAAWI,IAAjB,EAAuB;AACnB,UAAI,CAAC,CAACD,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAlB,IAA6B,OAAOF,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAvB,KAAmC,QAApE,EAA8E;AAC1E,eAAOF,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAvB;AACH;;AACD,UAAI,CAAC,CAACF,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAlB,IAA6B,OAAOF,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAvB,KAAmC,QAAhE,IAA4E,CAAC,CAACF,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAhB,CAAwBC,MAA1G,EAAkH;AAC9G,eAAOH,CAAC,CAACH,QAAF,CAAWI,IAAX,CAAgBC,OAAhB,CAAwBC,MAA/B;AACH;AACJ;;AACD,QAAI,CAAC,CAACH,CAAC,CAACH,QAAF,CAAWO,UAAjB,EAA6B;AACzB,aAAOJ,CAAC,CAACH,QAAF,CAAWO,UAAlB;AACH;AACJ;;AACD,SAAO,uBAAP;AACH,CAfD;;AAkBA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,MACpBT,QADoB,GACPS,KADO,CACpBT,QADoB;;AAE5B,MAAIA,QAAJ,EAAc;AACV,QAAIA,QAAQ,CAACU,MAAT,KAAoB,GAAxB,EAA6B;AACzBZ,MAAAA,QAAQ,CAACT,WAAW,CAACsB,MAAZ,EAAD,CAAR;AACH;;AACDb,IAAAA,QAAQ,CAACX,YAAY,CAACsB,KAAb,CAAmBP,UAAU,CAACO,KAAD,CAA7B,CAAD,CAAR;AACAX,IAAAA,QAAQ,CAACV,aAAa,CAACa,IAAd,EAAD,CAAR;AACA,WAAOD,QAAP;AACH;;AACD,SAAOS,KAAP;AACH,CAXD;;AAaA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAChC,MAAIA,OAAJ,EAAa;AACTf,IAAAA,QAAQ,CAACR,WAAW,CAACwB,MAAZ,CAAmB,YAAnB,CAAD,CAAR;AACH;;AACDD,EAAAA,OAAO,CAACE,OAAR,GAAkB9B,UAAU,EAA5B;AACA,SAAO4B,OAAP;AACH,CAND;;AAQAlB,QAAQ,CAACqB,YAAT,CAAsBH,OAAtB,CAA8BI,GAA9B,CACI,UAAAJ,OAAO;AAAA,SAAID,cAAc,CAACC,OAAD,CAAlB;AAAA,CADX;AAIAlB,QAAQ,CAACqB,YAAT,CAAsBhB,QAAtB,CAA+BiB,GAA/B,CACI,UAAAjB,QAAQ;AAAA,SAAID,cAAc,CAACC,QAAD,CAAlB;AAAA,CADZ,EAEI,UAAAS,KAAK;AAAA,SAAID,YAAY,CAACC,KAAD,CAAhB;AAAA,CAFT;AAKA,OAAO,IAAMS,SAAS,GAAGvB,QAAlB","sourcesContent":["import axios from 'axios';\nimport { authHeader, store } from '../_helpers'\nimport { alertActions, loaderActions, userActions, crudActions } from '../_actions';\n\nlet apiUrl = ''\n\nif (process.env.NODE_ENV === 'production') {\n    apiUrl = ''\n}\n\nlet instance = axios.create({\n    baseURL: apiUrl,\n});\n\n\nconst { dispatch } = store\nconst successHandler = (response) => {\n    if (response) {\n        dispatch(loaderActions.hide());\n    }\n    return response\n}\n\nconst parseError = (e) => {\n    if (!!e && !!e.response) {\n        if (!!e.response.data) {\n            if (!!e.response.data.message && typeof e.response.data.message === 'string') {\n                return e.response.data.message\n            }\n            if (!!e.response.data.message && typeof e.response.data.message === 'object' && !!e.response.data.message.detail) {\n                return e.response.data.message.detail\n            }\n        }\n        if (!!e.response.statusText) {\n            return e.response.statusText\n        }\n    }\n    return 'Something went wrong!'\n}\n\n\nconst errorHandler = (error) => {\n    const { response } = error\n    if (response) {\n        if (response.status === 401) {\n            dispatch(userActions.logout())\n        }\n        dispatch(alertActions.error(parseError(error)))\n        dispatch(loaderActions.hide());\n        return response\n    }\n    return error\n}\n\nconst requestHandler = (request) => {\n    if (request) {\n        dispatch(crudActions._clear('formSubmit'))\n    }\n    request.headers = authHeader();\n    return request\n}\n\ninstance.interceptors.request.use(\n    request => requestHandler(request)\n)\n\ninstance.interceptors.response.use(\n    response => successHandler(response),\n    error => errorHandler(error),\n)\n\nexport const apiConfig = instance"]},"metadata":{},"sourceType":"module"}