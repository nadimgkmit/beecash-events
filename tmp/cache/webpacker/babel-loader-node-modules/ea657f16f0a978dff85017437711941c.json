{"ast":null,"code":"import { apiConfig } from './api';\nexport var crudService = {\n  _get: _get,\n  _getAll: _getAll,\n  _getAllData: _getAllData,\n  _create: _create,\n  _update: _update,\n  _delete: _delete\n};\n\nfunction _get(type, id) {\n  return apiConfig.get(\"/\".concat(type, \"/\").concat(id)).then(function (result) {\n    return result;\n  });\n}\n\nfunction _getAllData(type, filter) {\n  return apiConfig.get(\"/\".concat(type), {\n    params: filter\n  });\n}\n\nfunction _getAll(type, filterData) {\n  var filters = [];\n  var filter = [];\n\n  if (filterData) {\n    if (filterData.filters) {\n      filterData.filters.map(function (filter) {\n        filters.push({\n          name: filter.column.field,\n          value: filter.value\n        });\n        return null;\n      });\n    }\n\n    filter = {\n      page: filterData.page + 1,\n      pageSize: filterData.pageSize,\n      search: filterData.search,\n      orderBy: filterData.orderBy ? filterData.orderBy.field : null,\n      orderDirection: filterData.orderDirection,\n      filters: JSON.stringify(filters)\n    };\n  }\n\n  return apiConfig.get(\"/\".concat(type), {\n    params: filter\n  });\n}\n\nfunction _create(type, data) {\n  return apiConfig.post(\"/\".concat(type), data);\n}\n\nfunction _update(type, id, data) {\n  return apiConfig.put(\"/\".concat(type, \"/\").concat(id), data);\n}\n\nfunction _delete(type, id) {\n  return apiConfig[\"delete\"](\"/\".concat(type, \"/\").concat(id));\n}","map":{"version":3,"sources":["/Users/jarvis/dev/beecash-events/app/javascript/packs/_services/crud.service.jsx"],"names":["apiConfig","crudService","_get","_getAll","_getAllData","_create","_update","_delete","type","id","get","then","result","filter","params","filterData","filters","map","push","name","column","field","value","page","pageSize","search","orderBy","orderDirection","JSON","stringify","data","post","put"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAO,IAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAJA,IADuB;AAEvBC,EAAAA,OAAO,EAAPA,OAFuB;AAGvBC,EAAAA,WAAW,EAAXA,WAHuB;AAIvBC,EAAAA,OAAO,EAAPA,OAJuB;AAKvBC,EAAAA,OAAO,EAAPA,OALuB;AAMvBC,EAAAA,OAAO,EAAPA;AANuB,CAApB;;AAQP,SAASL,IAAT,CAAcM,IAAd,EAAoBC,EAApB,EAAwB;AACpB,SAAOT,SAAS,CAACU,GAAV,YAAkBF,IAAlB,cAA0BC,EAA1B,GACFE,IADE,CACG,UAAAC,MAAM,EAAI;AACZ,WAAOA,MAAP;AACH,GAHE,CAAP;AAIH;;AAED,SAASR,WAAT,CAAqBI,IAArB,EAA2BK,MAA3B,EAAmC;AAC/B,SAAOb,SAAS,CAACU,GAAV,YAAkBF,IAAlB,GAA0B;AAAEM,IAAAA,MAAM,EAAED;AAAV,GAA1B,CAAP;AACH;;AAED,SAASV,OAAT,CAAiBK,IAAjB,EAAuBO,UAAvB,EAAmC;AAC/B,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIH,MAAM,GAAG,EAAb;;AACA,MAAIE,UAAJ,EAAgB;AACZ,QAAIA,UAAU,CAACC,OAAf,EAAwB;AACpBD,MAAAA,UAAU,CAACC,OAAX,CAAmBC,GAAnB,CAAuB,UAAAJ,MAAM,EAAI;AAC7BG,QAAAA,OAAO,CAACE,IAAR,CAAa;AACTC,UAAAA,IAAI,EAAEN,MAAM,CAACO,MAAP,CAAcC,KADX;AAETC,UAAAA,KAAK,EAAET,MAAM,CAACS;AAFL,SAAb;AAIA,eAAO,IAAP;AACH,OAND;AAOH;;AAEDT,IAAAA,MAAM,GAAG;AACLU,MAAAA,IAAI,EAAER,UAAU,CAACQ,IAAX,GAAkB,CADnB;AAELC,MAAAA,QAAQ,EAAET,UAAU,CAACS,QAFhB;AAGLC,MAAAA,MAAM,EAAEV,UAAU,CAACU,MAHd;AAILC,MAAAA,OAAO,EAAEX,UAAU,CAACW,OAAX,GAAqBX,UAAU,CAACW,OAAX,CAAmBL,KAAxC,GAAgD,IAJpD;AAKLM,MAAAA,cAAc,EAAEZ,UAAU,CAACY,cALtB;AAMLX,MAAAA,OAAO,EAAEY,IAAI,CAACC,SAAL,CAAeb,OAAf;AANJ,KAAT;AAQH;;AAED,SAAOhB,SAAS,CAACU,GAAV,YAAkBF,IAAlB,GAA0B;AAAEM,IAAAA,MAAM,EAAED;AAAV,GAA1B,CAAP;AACH;;AACD,SAASR,OAAT,CAAiBG,IAAjB,EAAuBsB,IAAvB,EAA6B;AACzB,SAAO9B,SAAS,CAAC+B,IAAV,YAAmBvB,IAAnB,GAA2BsB,IAA3B,CAAP;AACH;;AACD,SAASxB,OAAT,CAAiBE,IAAjB,EAAuBC,EAAvB,EAA2BqB,IAA3B,EAAiC;AAC7B,SAAO9B,SAAS,CAACgC,GAAV,YAAkBxB,IAAlB,cAA0BC,EAA1B,GAAgCqB,IAAhC,CAAP;AACH;;AACD,SAASvB,OAAT,CAAiBC,IAAjB,EAAuBC,EAAvB,EAA2B;AACvB,SAAOT,SAAS,UAAT,YAAqBQ,IAArB,cAA6BC,EAA7B,EAAP;AACH","sourcesContent":["import { apiConfig } from './api';\n\nexport const crudService = {\n    _get,\n    _getAll,\n    _getAllData,\n    _create,\n    _update,\n    _delete\n};\nfunction _get(type, id) {\n    return apiConfig.get(`/${type}/${id}`)\n        .then(result => {\n            return result;\n        });\n}\n\nfunction _getAllData(type, filter) {\n    return apiConfig.get(`/${type}`, { params: filter })\n}\n\nfunction _getAll(type, filterData) {\n    let filters = []\n    let filter = []\n    if (filterData) {\n        if (filterData.filters) {\n            filterData.filters.map(filter => {\n                filters.push({\n                    name: filter.column.field,\n                    value: filter.value\n                })\n                return null\n            })\n        }\n\n        filter = {\n            page: filterData.page + 1,\n            pageSize: filterData.pageSize,\n            search: filterData.search,\n            orderBy: filterData.orderBy ? filterData.orderBy.field : null,\n            orderDirection: filterData.orderDirection,\n            filters: JSON.stringify(filters),\n        }\n    }\n\n    return apiConfig.get(`/${type}`, { params: filter })\n}\nfunction _create(type, data) {\n    return apiConfig.post(`/${type}`, data)\n}\nfunction _update(type, id, data) {\n    return apiConfig.put(`/${type}/${id}`, data)\n}\nfunction _delete(type, id) {\n    return apiConfig.delete(`/${type}/${id}`)\n}"]},"metadata":{},"sourceType":"module"}