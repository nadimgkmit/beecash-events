{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ColorConstants_1 = require(\"./ColorConstants\");\n\nvar styleControl = function styleControl(hasInputFocus) {\n  if (hasInputFocus === void 0) {\n    hasInputFocus = false;\n  }\n\n  return {\n    background: \"transparent\",\n    borderWidth: 0,\n    borderBottom: getBorder(hasInputFocus),\n    borderRadius: 0,\n    boxShadow: \"none\",\n    marginRight: 25,\n    \"&:hover\": {\n      boxShadow: \"none\",\n      background: \"linear-gradient(to bottom, \" + ColorConstants_1.colorHover + \" 0%, \" + ColorConstants_1.colorHover + \" 100%)\",\n      backgroundPosition: \"0 100%\",\n      backgroundRepeat: \"no-repeat\",\n      backgroundSize: \"100% 1px\",\n      transition: \"background-size .2s\"\n    }\n  };\n};\n\nvar getBorder = function getBorder(hasInputFocus) {\n  return hasInputFocus ? \"solid 1px \" + ColorConstants_1.colorFocus : \"solid 1px \" + ColorConstants_1.colorNoFocus;\n};\n\nvar styleIndicatorsContainer = {\n  position: \"absolute\",\n  right: 0,\n  marginLeft: 8,\n  marginRight: -25,\n  backgroundColor: \"transparent\",\n  height: \"100%\"\n};\n\nvar styleClearIndicator = function styleClearIndicator(base) {\n  return {\n    color: ColorConstants_1.colorClearNormal,\n    margin: \"0 4px 0 0\",\n    padding: 0,\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: ColorConstants_1.colorClearHover\n    }\n  };\n};\n\nvar styleDropdownIndicator = {\n  margin: \"0 0 0 4px\",\n  padding: 0,\n  cursor: \"pointer\"\n};\nvar styleMenuList = {\n  padding: 0\n};\nvar styleNoOptionsMessage = {\n  textAlign: \"left\",\n  color: \"#ff8080\"\n};\n\nvar styleMultiValueRemove = function styleMultiValueRemove(isDisabled) {\n  if (isDisabled === void 0) {\n    isDisabled = false;\n  }\n\n  return function (base) {\n    return __assign(__assign({}, base), {\n      display: isDisabled ? \"none\" : base.display\n    });\n  };\n};\n\nvar styleValueContainer = function styleValueContainer(isClearable) {\n  if (isClearable === void 0) {\n    isClearable = false;\n  }\n\n  return {\n    padding: 0,\n    marginRight: isClearable ? 25 : 0,\n    overflow: \"hidden\",\n    whiteSpace: \"nowrap\",\n    textOverflow: \"ellipsis\"\n  };\n};\n\nexports.getStyles = function (props, hasInputFocus) {\n  var customStyles = props && props.styles ? props.styles : {};\n  var isDisabled = props && props.isDisabled ? true : false;\n  var isClearable = props && props.isClearable ? true : false;\n  return __assign(__assign({}, customStyles), {\n    control: mixStyle(styleControl(hasInputFocus), customStyles.control),\n    clearIndicator: mixStyle(styleClearIndicator, customStyles.clearIndicator),\n    dropdownIndicator: mixStyle(styleDropdownIndicator, customStyles.dropdownIndicator),\n    indicatorsContainer: mixStyle(styleIndicatorsContainer, customStyles.indicatorsContainer),\n    menuList: mixStyle(styleMenuList, customStyles.menuList),\n    multiValueRemove: mixStyle(styleMultiValueRemove(isDisabled), customStyles.multiValueRemove),\n    noOptionsMessage: mixStyle(styleNoOptionsMessage, customStyles.noOptionsMessage),\n    valueContainer: mixStyle(styleValueContainer(isClearable), customStyles.valueContainer)\n  });\n};\n\nvar mixStyle = function mixStyle(customStyle, styleFn) {\n  return function (base, state) {\n    return __assign(__assign(__assign({}, base), typeof customStyle === \"function\" ? customStyle(base, state) : customStyle), styleFn ? styleFn(base, state) : {});\n  };\n};","map":null,"metadata":{},"sourceType":"module"}