{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar FormControl_1 = require(\"@material-ui/core/FormControl/FormControl\");\n\nvar SelectDropdown_1 = require(\"./SelectDropdown\");\n\nvar SelectHelperText_1 = require(\"./SelectHelperText\");\n\nvar SelectLabel_1 = require(\"./SelectLabel\");\n\nvar lodash_1 = require(\"lodash\");\n\nvar ReactSelectMaterialUi = function (_super) {\n  __extends(ReactSelectMaterialUi, _super);\n\n  function ReactSelectMaterialUi(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.getFinalValue = function (isMulti, value, values, defaultValue, defaultValues) {\n      return isMulti ? values || defaultValues : value || defaultValue;\n    };\n\n    _this.getSelectedOption = function (options, value) {\n      return lodash_1.isNil(value) ? undefined : _this.getOneOrMoreSelectOptions(options, value);\n    };\n\n    _this.getOptionForValue = function (options) {\n      return function (value) {\n        var option = lodash_1.find(options, _this.matchOptionValue(value));\n\n        if (lodash_1.isNil(option)) {\n          var subOptions = lodash_1.filter(options, _this.hasSubOptions);\n\n          if (lodash_1.isEmpty(subOptions)) {\n            return;\n          }\n\n          return _this.getOptionForValue(lodash_1.flatMap(subOptions, _this.getSubOption))(value);\n        }\n\n        return _this.getSelectOption(option);\n      };\n    };\n\n    _this.matchOptionValue = function (value) {\n      return function (option) {\n        if (lodash_1.isString(option)) {\n          return value === option;\n        }\n\n        return lodash_1.isEqual(value, option.value);\n      };\n    };\n\n    _this.hasSubOptions = function (option) {\n      return lodash_1.isString(option) === false && lodash_1.isArray(option.options);\n    };\n\n    _this.getSubOption = function (option) {\n      return option.options;\n    };\n\n    _this.handleChangeSelect = function (newValue) {\n      var _a = _this.props,\n          onChange = _a.onChange,\n          value = _a.value,\n          values = _a.values;\n\n      if (lodash_1.isEmpty(value) && lodash_1.isEmpty(values)) {\n        _this.setState({\n          filter: \"\",\n          selectedOption: newValue\n        });\n      }\n\n      if (lodash_1.isFunction(onChange)) {\n        onChange(_this.getValues(newValue), newValue === null ? undefined : newValue);\n      }\n    };\n\n    _this.handleGotFocus = function (event) {\n      _this.setState({\n        hasInputFocus: true\n      });\n\n      var onFocus = _this.props.onFocus;\n\n      if (lodash_1.isFunction(onFocus)) {\n        onFocus(event);\n      }\n    };\n\n    _this.handleLostFocus = function (event) {\n      _this.setState({\n        hasInputFocus: false\n      });\n\n      var onBlur = _this.props.onBlur;\n\n      if (lodash_1.isFunction(onBlur)) {\n        onBlur(event);\n      }\n    };\n\n    var defaultValue = props.defaultValue,\n        defaultValues = props.defaultValues,\n        SelectProps = props.SelectProps,\n        value = props.value,\n        values = props.values;\n\n    var finalValue = _this.getFinalValue(SelectProps === null || SelectProps === void 0 ? void 0 : SelectProps.isMulti, value, values, defaultValue, defaultValues);\n\n    _this.state = {\n      filter: \"\",\n      hasInputFocus: false,\n      selectedOption: _this.getSelectedOption(props.options, finalValue)\n    };\n    return _this;\n  }\n\n  ReactSelectMaterialUi.prototype.getOneOrMoreSelectOptions = function (options, value) {\n    if (lodash_1.isArray(value)) {\n      return lodash_1.reject(lodash_1.map(value, this.getOptionForValue(options)), lodash_1.isNil);\n    }\n\n    return this.getOptionForValue(options)(value);\n  };\n\n  ReactSelectMaterialUi.prototype.getOptions = function (options) {\n    return lodash_1.map(options, this.getSelectOption);\n  };\n\n  ReactSelectMaterialUi.prototype.getSelectOption = function (option) {\n    if (lodash_1.isString(option)) {\n      return {\n        label: option,\n        value: option\n      };\n    }\n\n    return option;\n  };\n\n  ReactSelectMaterialUi.prototype.render = function () {\n    var _a = this.props,\n        autoComplete = _a.autoComplete,\n        autoFocus = _a.autoFocus,\n        children = _a.children,\n        className = _a.className,\n        defaultValue = _a.defaultValue,\n        defaultValues = _a.defaultValues,\n        disabled = _a.disabled,\n        error = _a.error,\n        FormHelperTextProps = _a.FormHelperTextProps,\n        fullWidth = _a.fullWidth,\n        helperText = _a.helperText,\n        id = _a.id,\n        InputLabelProps = _a.InputLabelProps,\n        inputRef = _a.inputRef,\n        label = _a.label,\n        multiline = _a.multiline,\n        name = _a.name,\n        onBlur = _a.onBlur,\n        onChange = _a.onChange,\n        onFocus = _a.onFocus,\n        placeholder = _a.placeholder,\n        required = _a.required,\n        rows = _a.rows,\n        rowsMax = _a.rowsMax,\n        select = _a.select,\n        SelectProps = _a.SelectProps,\n        type = _a.type,\n        value = _a.value,\n        values = _a.values,\n        options = _a.options,\n        variant = _a.variant,\n        other = __rest(_a, [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"defaultValue\", \"defaultValues\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\", \"values\", \"options\", \"variant\"]);\n\n    var helperTextId = id && helperText ? id + \"-helper-text\" : undefined;\n    var _b = this.state,\n        hasInputFocus = _b.hasInputFocus,\n        selectedOption = _b.selectedOption;\n    var dropdownOption = selectedOption;\n\n    if (value === null || values === null) {\n      dropdownOption = null;\n    } else if (value || values) {\n      var propIsMulti = SelectProps === null || SelectProps === void 0 ? void 0 : SelectProps.isMulti;\n      var finalValue = this.getFinalValue(propIsMulti, value, values);\n      dropdownOption = this.getSelectedOption(options, finalValue);\n    }\n\n    var propIsClearable = SelectProps === null || SelectProps === void 0 ? void 0 : SelectProps.isClearable;\n    var isClearable = propIsClearable === true && this.isClearable(dropdownOption);\n    var isDisabled = disabled || !!SelectProps && SelectProps.isDisabled;\n    var selectPlaceholder = label ? \"\" : placeholder;\n    var shrink = this.isShrinked(dropdownOption);\n    return React.createElement(FormControl_1[\"default\"], __assign({\n      \"aria-describedby\": helperTextId,\n      className: className,\n      error: error,\n      fullWidth: fullWidth,\n      required: required\n    }, other), React.createElement(SelectLabel_1[\"default\"], {\n      inputId: id,\n      label: label,\n      shrink: shrink,\n      hasInputFocus: hasInputFocus,\n      inputLabelProps: InputLabelProps\n    }), React.createElement(SelectDropdown_1[\"default\"], {\n      inputId: id,\n      value: dropdownOption,\n      placeholder: selectPlaceholder,\n      options: this.getOptions(options),\n      selectProps: __assign(__assign({}, SelectProps), {\n        isClearable: isClearable,\n        isDisabled: isDisabled\n      }),\n      hasInputFocus: hasInputFocus,\n      onChange: this.handleChangeSelect,\n      onFocus: this.handleGotFocus,\n      onBlur: this.handleLostFocus\n    }), React.createElement(SelectHelperText_1[\"default\"], {\n      id: helperTextId,\n      helperText: helperText,\n      formHelperTextProps: FormHelperTextProps\n    }));\n  };\n\n  ReactSelectMaterialUi.prototype.isShrinked = function (selectedOption) {\n    if (this.hasInputFocus() || this.hasFilter()) {\n      return true;\n    }\n\n    return lodash_1.isEmpty(selectedOption) === false;\n  };\n\n  ReactSelectMaterialUi.prototype.isClearable = function (dropdownOption) {\n    var disabled = this.props.disabled;\n\n    if (disabled) {\n      return false;\n    }\n\n    if (lodash_1.isEmpty(dropdownOption)) {\n      return false;\n    }\n\n    if (lodash_1.isArray(dropdownOption) && lodash_1.size(dropdownOption) < 2) {\n      return false;\n    }\n\n    return true;\n  };\n\n  ReactSelectMaterialUi.prototype.hasInputFocus = function () {\n    return this.state.hasInputFocus === true;\n  };\n\n  ReactSelectMaterialUi.prototype.hasFilter = function () {\n    return lodash_1.isEmpty(this.state.filter) === false;\n  };\n\n  ReactSelectMaterialUi.prototype.getValues = function (value) {\n    if (lodash_1.isNil(value)) {\n      return null;\n    }\n\n    if (lodash_1.isArray(value)) {\n      return lodash_1.map(value, this.getValue);\n    }\n\n    return this.getValue(value);\n  };\n\n  ReactSelectMaterialUi.prototype.getValue = function (option) {\n    return option.value;\n  };\n\n  return ReactSelectMaterialUi;\n}(React.PureComponent);\n\nexports[\"default\"] = ReactSelectMaterialUi;","map":null,"metadata":{},"sourceType":"module"}